type OwnershipSettings @entity {
  id: ID!
  seabrickContractAddress: Bytes!
  seabrickMarketAddress: Bytes!
  ownershipAddress: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  token: Token!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SeabrickContract @entity {
  id: Bytes! # address
  owner: Bytes! # address
  name: String
  symbol: String
  totalSupply: BigInt!
}

type Account @entity {
  id: Bytes! # address
  tokens: [Token!]! @derivedFrom(field: "owner")
  isMinter: Boolean!
}

type Token @entity {
  id: Bytes! # ID is the BigInt token ID
  owner: Account!
  tokenId: BigInt!
  burned: Boolean!
}

type SeabrickMarketContract @entity {
  id: Bytes! # address
  owner: Bytes! # address
  price: BigInt! # USD Price
  token: Bytes! # Address
  claimVault: Bytes! # Address
}

type AggregatorData @entity {
  id: Bytes! # address
  name: Bytes! # Agregator hash name
  nameReadable: String!
  aggregator: Bytes! # aggregator address
  decimals: BigInt!
  token: ERC20Token!
}

type ERC20Token @entity {
  id: Bytes! # address
  name: String!
  symbol: String!
  decimals: BigInt!
  address: Bytes! # address
  aggregator: [AggregatorData!]! @derivedFrom(field: "token")
  vaults: [VaultToken!]! @derivedFrom(field: "token")
}

type Buy @entity(immutable: true) {
  id: Bytes!
  amountPaid: BigInt!
  buyer: Bytes!
  tokenId: BigInt!
  aggregator: AggregatorData!
  paymentToken: ERC20Token!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Vault per address that includes all the tokenVaults
type Vault @entity {
  id: Bytes! # Address if this vault
  tokenVaults: [VaultToken!]! @derivedFrom(field: "vault")
}

type VaultToken @entity {
  id: Bytes! # kecck256(vault address + token address)
  vault: Vault!
  # Token of this vault
  token: ERC20Token!
  # Total collected only for this vault on this token
  totalCollected: BigInt!
}
